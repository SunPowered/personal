'''
Created on 2012-07-08

@author: timvb
'''
import re

from utils import log, config
from schematic.circuit import Circuit, CircuitError
from spice.netlist import SpiceNetlist

class SpiceCircuit(Circuit):
    '''
    An object for a spice circuit.
    
    Methods:
    
    parseVariables()        -        parses variables from a circuit file
    generateSpiceNetlist()    -        generates a spice netlist from the circuit
    '''


    def __init__(self, *args, **kwargs):
        '''
        Constructor
        '''
        logger = kwargs.get('logger', None)
        if not logger:
            kwargs['logger'] = log.getDefaultLogger('spice.circuit.SpiceCircuit')
        Circuit.__init__(self, *args, **kwargs)

        self.netlist_cls = SpiceNetlist
        #Regex for a variable value attribute
        self.schematic_variable_flag = config.VARIABLE_FLAG
        self.variable_value_re = re.compile(r"^value="+config.VARIABLE_FLAG_RE +"(.+)", re.M)
                
    def parseVariables(self):
        '''
        parses the file to see whether there are any variable values
        
        This is signified in the schematic by 
        value=$var
        
        regex ^value=\$(.+), re.M
        
        '''
        
        #Parse variables from given file path using regex
        try:
            variables = self.variable_value_re.findall(self._readFileData())
        except:
            return None
        
        self.variables = variables
        self.variables.sort()                                          
        return self.variables
    
    def generateSpiceNetlist(self, file_path=None, name=None):
        '''
        generates a spice netlist from a circuit
        
        If a file_path is not given, it will be autogenerated 
        '''
        from spice.netlist import generateNetlistFilePath
        
        if not file_path:
            file_path = generateNetlistFilePath(self.getFilePath())
        
        
        return self._generateNetlist(output_file_name=file_path, name=name)