'''
@package spice.simulation.circuit
@author timvb
@brief A SPICE circuit module.   
@details Intended to be able to parse a gschem schematic,
made for a spice simulation, for any variables needed for a simulation.  It can also 
generate a SPICE netlist capable of being run in a simulation
'''
import re

from utils import log, config
from schematic.circuit import Circuit
from spice.netlist import SpiceNetlist

class SpiceCircuit(Circuit):
    '''
    @brief An object for a spice circuit.  
    @details This would be a gschem schematic, configured for
    a SPICE simulation.  It can parse the file for possible variables as well as handle
    the actual netlist generation  
    
    '''


    def __init__(self, *args, **kwargs):
        '''
        @brief Constructor method for a spice.circuit.SpiceCircuit object
        @note Takes the same parameters as schematic.Circut
        '''
        logger = kwargs.get('logger', None)
        if not logger:
            kwargs['logger'] = log.getDefaultLogger('spice.circuit.SpiceCircuit')
            
        Circuit.__init__(self, *args, **kwargs)

        self.netlist_cls = SpiceNetlist
        #Regex for a variable value attribute
        self.schematic_variable_flag = config.VARIABLE_FLAG
        self.variable_value_re = re.compile(r"^value="+config.VARIABLE_FLAG_RE +"(.+)", re.M)
        
        self.parseVariables()
          
    def parseVariables(self):
        '''
        @return a list of varaiables in the schematic or an empty list
        @brief parses the file to see whether there are any variable values   
        '''
        
        #Parse variables from given file path using regex
        try:
            variables = self.variable_value_re.findall(self._readFileData())
        except:
            return []
        
        self.variables = variables
        self.variables.sort()                                          
        return self.variables
    
    def generateSpiceNetlist(self, file_path=None, name=None):
        '''
        @brief Generates a SPICE netlist from a circuit
        @param file_path (Opt) Specify the file path of the netlist
        @param name (Opt) Assigns a name to the netlist
        @return spice.netlist.SpiceNetlist object
        @note If a file_path is not given, it will be autogenerated 
        '''
        from spice.netlist import generateNetlistFilePath
        
        if not file_path:
            file_path = generateNetlistFilePath(self.getFilePath())
        
        
        return self._generateNetlist(output_file_name=file_path, name=name)